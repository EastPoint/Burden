using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;

namespace EPS.Concurrency
{
	/// <summary>	Describes a durable job queue action.  </summary>
	/// <remarks>	7/26/2011. </remarks>
	/// <typeparam name="TQueue">	   	Type of the queue input. </typeparam>
	/// <typeparam name="TQueuePoison">	Type of the queue poison items. </typeparam>
	public class DurableJobQueueAction<TQueue, TQueuePoison>
	{
		/// <summary>	Gets the type of the action. </summary>
		/// <value>	The type of the action. </value>
		public DurableJobQueueActionType ActionType { get; private set; }
		
		/// <summary>	Gets the queue input. </summary>
		/// <value>	The input. </value>
		public TQueue Input { get; private set; }

		/// <summary>	Gets or sets the poison. </summary>
		/// <value>	The poison. </value>
		public TQueuePoison Poison { get; private set; }
		
		private readonly bool _isInputValueType = typeof(TQueue).IsValueType;
		private readonly bool _isPoisonValueType = typeof(TQueuePoison).IsValueType;

		internal DurableJobQueueAction(DurableJobQueueActionType actionType, TQueue input, TQueuePoison poison)
		{
			ActionType = actionType;
			Input = input;
			Poison = poison;

			switch (actionType)
			{
				case DurableJobQueueActionType.Queued:
				case DurableJobQueueActionType.Completed:
				case DurableJobQueueActionType.Pending:
				default:
					if (!_isInputValueType && null == input)
					{
						throw new ArgumentNullException("input");
					}
					if (!_isPoisonValueType && null != poison)
					{
						throw new ArgumentException("must be null", "poison");
					}
					break;

				case DurableJobQueueActionType.Deleted:
					if (!_isInputValueType && null != input)
					{
						throw new ArgumentException("must be null", "input");
					}
					if (!_isPoisonValueType && null == poison)
					{
						throw new ArgumentNullException("poison");
					}
					break;

				case DurableJobQueueActionType.Poisoned:
					if (!_isInputValueType && null == input)
					{
						throw new ArgumentNullException("input");
					}
					if (!_isPoisonValueType && null == poison)
					{
						throw new ArgumentNullException("poison");
					}
					break;
			}
		}

		/// <summary>
		/// Convenience overload to cast a DurableJobQueueAction{TQueue, object} generated by DurableJobQueueAction factory method to a
		/// DurableJobQueueAction{TQueue, TQueuePoison} implicitly.
		/// </summary>
		/// <remarks>	7/14/2011. </remarks>
		/// <param name="input">	The input result. </param>
		/// <returns>	The result of the operation. </returns>
		[SuppressMessage("Microsoft.Usage", "CA2225:OperatorOverloadsHaveNamedAlternates", Justification = "Supplying these static methods on a generic class makes them very difficult to use")]
		public static implicit operator DurableJobQueueAction<TQueue, TQueuePoison>(DurableJobQueueAction<TQueue, object> input)
		{
			if (null == input) return null;

			return new DurableJobQueueAction<TQueue, TQueuePoison>(input.ActionType, input.Input, default(TQueuePoison));
		}

		/// <summary>
		/// Convenience overload to cast a DurableJobQueueAction{object, TQueuePoison} generated by DurableJobQueueAction to a
		/// DurableJobQueueAction{TQueue, TQueuePoison} implicitly.
		/// </summary>
		/// <remarks>	7/27/2011. </remarks>
		/// <param name="input">	The input result. </param>
		/// <returns>	The result of the operation. </returns>
		[SuppressMessage("Microsoft.Usage", "CA2225:OperatorOverloadsHaveNamedAlternates", Justification = "Supplying these static methods on a generic class makes them very difficult to use")]
		public static implicit operator DurableJobQueueAction<TQueue, TQueuePoison>(DurableJobQueueAction<object, TQueuePoison> input)
		{
			if (null == input) return null;

			return new DurableJobQueueAction<TQueue, TQueuePoison>(input.ActionType, default(TQueue), input.Poison);
		}
	}

	/// <summary>	Convenience class for creating instances of DurableJobQueueAction.  </summary>
	/// <remarks>	7/27/2011. </remarks>
	public static class DurableJobQueueAction
	{
		/// <summary>	Creates an action description for a queued event. </summary>
		/// <remarks>	7/27/2011. </remarks>
		/// <typeparam name="TQueue">	Type of the queue input. </typeparam>
		/// <param name="input">	The input. </param>
		/// <returns>	A new DurableJobQueueAction instance. </returns>
		public static DurableJobQueueAction<TQueue, object> Queued<TQueue>(TQueue input)
		{
			return new DurableJobQueueAction<TQueue, object>(DurableJobQueueActionType.Queued, input, null);
		}

		/// <summary>	Creates an action description for a pending event. </summary>
		/// <remarks>	7/27/2011. </remarks>
		/// <typeparam name="TQueue">	Type of the queue input. </typeparam>
		/// <param name="input">	The input. </param>
		/// <returns>	A new DurableJobQueueAction instance. </returns>
		public static DurableJobQueueAction<TQueue, object> Pending<TQueue>(TQueue input)
		{
			return new DurableJobQueueAction<TQueue, object>(DurableJobQueueActionType.Pending, input, null);
		}

		/// <summary>	Creates an action description for a completed event. </summary>
		/// <remarks>	7/27/2011. </remarks>
		/// <typeparam name="TQueue">	Type of the queue input. </typeparam>
		/// <param name="input">	The input. </param>
		/// <returns>	A new DurableJobQueueAction instance. </returns>
		public static DurableJobQueueAction<TQueue, object> Completed<TQueue>(TQueue input)
		{
			return new DurableJobQueueAction<TQueue, object>(DurableJobQueueActionType.Completed, input, null);
		}

		/// <summary>	Creates an action description for a poisoned event. </summary>
		/// <remarks>	7/27/2011. </remarks>
		/// <typeparam name="TQueue">	   	Type of the queue input. </typeparam>
		/// <typeparam name="TQueuePoison">	Type of the queue poison. </typeparam>
		/// <param name="input"> 	The input. </param>
		/// <param name="poison">	The poison. </param>
		/// <returns>	A new DurableJobQueueAction instance. </returns>
		public static DurableJobQueueAction<TQueue, TQueuePoison> Poisoned<TQueue, TQueuePoison>(TQueue input, TQueuePoison poison)
		{
			return new DurableJobQueueAction<TQueue, TQueuePoison>(DurableJobQueueActionType.Poisoned, input, poison);
		}

		/// <summary>	Creates an action description for a deleted event. </summary>
		/// <remarks>	7/27/2011. </remarks>
		/// <typeparam name="TQueuePoison">	Type of the queue poison. </typeparam>
		/// <param name="poison">	The poison. </param>
		/// <returns>	A new DurableJobQueueAction instance. </returns>
		public static DurableJobQueueAction<object, TQueuePoison> Deleted<TQueuePoison>(TQueuePoison poison)
		{
			return new DurableJobQueueAction<object, TQueuePoison>(DurableJobQueueActionType.Deleted, null, poison);
		}
	}
}